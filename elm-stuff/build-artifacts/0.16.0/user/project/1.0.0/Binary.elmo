Elm.Binary = Elm.Binary || {};
Elm.Binary.make = function (_elm) {
   "use strict";
   _elm.Binary = _elm.Binary || {};
   if (_elm.Binary.values) return _elm.Binary.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var East = {ctor: "East"};
   var North = {ctor: "North"};
   var randomBools = function (count) {    return $Basics.fst(A2($Random.generate,A2($Random.list,count,$Random.bool),$Random.initialSeed(0)));};
   var wallErasures = function (count) {    return A2($List.map,function (bool) {    return bool ? North : East;},randomBools(count));};
   var Room = F4(function (a,b,c,d) {    return {x: a,y: b,northWall: c,eastWall: d};});
   var makeGrid = F2(function (width,height) {
      return A2($List.map,
      function (room) {
         return A2(room,true,true);
      },
      A2($List.concatMap,function (room) {    return A2($List.map,room,_U.range(0,height - 1));},A2($List.map,Room,_U.range(0,width - 1))));
   });
   var gridSize = 10;
   var maze = A2(makeGrid,gridSize,gridSize);
   var eraseWall = F2(function (wall,room) {
      var size = gridSize - 1;
      var _p0 = {ctor: "_Tuple2",_0: size - room.x,_1: size - room.y};
      if (_p0.ctor === "_Tuple2" && _p0._0 === 0 && _p0._1 === 0) {
            return room;
         } else {
            var _p1 = wall;
            if (_p1.ctor === "North") {
                  var _p2 = _U.cmp(room.y,gridSize - 1) < 0;
                  if (_p2 === true) {
                        return _U.update(room,{northWall: false});
                     } else {
                        return _U.update(room,{eastWall: false});
                     }
               } else {
                  var _p3 = _U.cmp(room.x,gridSize - 1) < 0;
                  if (_p3 === true) {
                        return _U.update(room,{eastWall: false});
                     } else {
                        return _U.update(room,{northWall: false});
                     }
               }
         }
   });
   var roomSize = 30;
   var northWall = function (room) {
      var floatSize = $Basics.toFloat(roomSize);
      var _p4 = room.northWall;
      if (_p4 === true) {
            return _U.list([{ctor: "_Tuple2",_0: 0,_1: floatSize},{ctor: "_Tuple2",_0: floatSize,_1: floatSize}]);
         } else {
            return _U.list([]);
         }
   };
   var eastWall = function (room) {
      var floatSize = $Basics.toFloat(roomSize);
      var _p5 = room.eastWall;
      if (_p5 === true) {
            return _U.list([{ctor: "_Tuple2",_0: floatSize,_1: floatSize},{ctor: "_Tuple2",_0: floatSize,_1: 0}]);
         } else {
            return _U.list([]);
         }
   };
   var viewRoom = function (room) {
      return A2($Graphics$Collage.traced,$Graphics$Collage.solid($Color.black),$Graphics$Collage.path(A2($Basics._op["++"],northWall(room),eastWall(room))));
   };
   var roomPosition = function (room) {    return {ctor: "_Tuple2",_0: $Basics.toFloat(room.x * roomSize),_1: $Basics.toFloat(room.y * roomSize)};};
   var showRoom = function (room) {    return A2($Graphics$Collage.move,roomPosition(room),viewRoom(room));};
   var leftBottomWalls = function (size) {
      var corner = $Basics.toFloat(size * roomSize);
      return A2($Graphics$Collage.traced,
      $Graphics$Collage.solid($Color.black),
      $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: 0,_1: corner},{ctor: "_Tuple2",_0: 0,_1: 0},{ctor: "_Tuple2",_0: corner,_1: 0}])));
   };
   var viewMaze = function (maze) {    return A2($List._op["::"],leftBottomWalls(gridSize),A2($List.map,showRoom,maze));};
   var view = function (maze) {    return A3($Graphics$Collage.collage,1000,1000,viewMaze(maze));};
   var main = view(A3($List.map2,eraseWall,wallErasures(gridSize * gridSize),maze));
   return _elm.Binary.values = {_op: _op
                               ,roomSize: roomSize
                               ,gridSize: gridSize
                               ,Room: Room
                               ,makeGrid: makeGrid
                               ,maze: maze
                               ,northWall: northWall
                               ,eastWall: eastWall
                               ,viewRoom: viewRoom
                               ,roomPosition: roomPosition
                               ,showRoom: showRoom
                               ,leftBottomWalls: leftBottomWalls
                               ,viewMaze: viewMaze
                               ,view: view
                               ,randomBools: randomBools
                               ,North: North
                               ,East: East
                               ,wallErasures: wallErasures
                               ,eraseWall: eraseWall
                               ,main: main};
};