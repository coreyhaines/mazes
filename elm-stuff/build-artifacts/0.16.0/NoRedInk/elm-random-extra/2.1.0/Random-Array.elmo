Elm.Random = Elm.Random || {};
Elm.Random.Array = Elm.Random.Array || {};
Elm.Random.Array.make = function (_elm) {
   "use strict";
   _elm.Random = _elm.Random || {};
   _elm.Random.Array = _elm.Random.Array || {};
   if (_elm.Random.Array.values) return _elm.Random.Array.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Random$Extra = Elm.Random.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var choose = function (arr) {
      if ($Array.isEmpty(arr)) return $Random$Extra.constant({ctor: "_Tuple2",_0: $Maybe.Nothing,_1: arr}); else {
            var front = function (i) {    return A3($Array.slice,0,i,arr);};
            var lastIndex = $Array.length(arr) - 1;
            var back = function (i) {    return _U.eq(i,lastIndex) ? $Array.empty : A3($Array.slice,i + 1,lastIndex + 1,arr);};
            var gen = A2($Random.$int,0,lastIndex);
            return A2($Random.map,
            function (index) {
               return {ctor: "_Tuple2",_0: A2($Array.get,index,arr),_1: A2($Array.append,front(index),back(index))};
            },
            gen);
         }
   };
   var shuffle = function (arr) {
      if ($Array.isEmpty(arr)) return $Random$Extra.constant(arr); else {
            var helper = function (_p0) {
               var _p1 = _p0;
               var _p6 = _p1._0;
               return A2($Random.andThen,
               choose(_p1._1),
               function (_p2) {
                  var _p3 = _p2;
                  var _p5 = _p3._1;
                  var _p4 = _p3._0;
                  if (_p4.ctor === "Nothing") {
                        return $Random$Extra.constant({ctor: "_Tuple2",_0: _p6,_1: _p5});
                     } else {
                        return helper({ctor: "_Tuple2",_0: A2($List._op["::"],_p4._0,_p6),_1: _p5});
                     }
               });
            };
            return A2($Random.map,function (_p7) {    return $Array.fromList($Basics.fst(_p7));},helper({ctor: "_Tuple2",_0: _U.list([]),_1: arr}));
         }
   };
   var sample = function (arr) {
      var gen = A2($Random.$int,0,$Array.length(arr) - 1);
      return A2($Random.map,function (index) {    return A2($Array.get,index,arr);},gen);
   };
   var emptyArray = $Random$Extra.constant($Array.empty);
   var array = F2(function (arrayLength,generator) {    return A2($Random$Extra.map,$Array.fromList,A2($Random.list,arrayLength,generator));});
   var rangeLengthArray = F3(function (minLength,maxLength,generator) {
      return A2($Random$Extra.flatMap,function (len) {    return A2(array,len,generator);},A2($Random.$int,minLength,maxLength));
   });
   return _elm.Random.Array.values = {_op: _op
                                     ,array: array
                                     ,emptyArray: emptyArray
                                     ,rangeLengthArray: rangeLengthArray
                                     ,sample: sample
                                     ,choose: choose
                                     ,shuffle: shuffle};
};