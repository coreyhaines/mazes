Elm.Random = Elm.Random || {};
Elm.Random.Set = Elm.Random.Set || {};
Elm.Random.Set.make = function (_elm) {
   "use strict";
   _elm.Random = _elm.Random || {};
   _elm.Random.Set = _elm.Random.Set || {};
   if (_elm.Random.Set.values) return _elm.Random.Set.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Random$Extra = Elm.Random.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var set = F2(function (maxLength,generator) {    return A2($Random$Extra.map,$Set.fromList,A2($Random.list,maxLength,generator));});
   var selectWithDefault = F2(function ($default,set) {    return A2($Random$Extra.selectWithDefault,$default,$Set.toList(set));});
   var select = function (set) {    return $Random$Extra.select($Set.toList(set));};
   var notInSet = F2(function (set,generator) {    return A2($Random$Extra.dropIf,A2($Basics.flip,$Set.member,set),generator);});
   var singleton = function (generator) {    return A2($Random$Extra.map,$Set.singleton,generator);};
   var empty = $Random$Extra.constant($Set.empty);
   return _elm.Random.Set.values = {_op: _op,empty: empty,singleton: singleton,notInSet: notInSet,select: select,selectWithDefault: selectWithDefault,set: set};
};